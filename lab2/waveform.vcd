$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module tb_adder_4bits $end
   $var wire 32 E WIDTH [31:0] $end
   $var wire 32 F TESTSUM [31:0] $end
   $var wire 4 # x [3:0] $end
   $var wire 4 $ y [3:0] $end
   $var wire 4 / s [3:0] $end
   $var wire 5 G tmp [4:0] $end
   $var wire 1 % c_in $end
   $var wire 1 0 c_out $end
   $var wire 1 & clk $end
   $var wire 32 H i [31:0] $end
   $var wire 32 I j [31:0] $end
   $scope module adder $end
    $var wire 4 # x_i [3:0] $end
    $var wire 4 $ y_i [3:0] $end
    $var wire 1 % c_i $end
    $var wire 4 / s_o [3:0] $end
    $var wire 1 0 c_o $end
    $var wire 5 D adder [4:0] $end
    $scope module genblk1[0] $end
     $scope module bit_inst $end
      $var wire 1 ' x_i $end
      $var wire 1 ( y_i $end
      $var wire 1 % c_i $end
      $var wire 1 1 s_o $end
      $var wire 1 2 c_o $end
      $var wire 1 3 a_int $end
      $var wire 1 4 b_int $end
      $var wire 1 5 d_int $end
     $upscope $end
    $upscope $end
    $scope module genblk1[1] $end
     $scope module bit_inst $end
      $var wire 1 ) x_i $end
      $var wire 1 * y_i $end
      $var wire 1 2 c_i $end
      $var wire 1 6 s_o $end
      $var wire 1 7 c_o $end
      $var wire 1 8 a_int $end
      $var wire 1 9 b_int $end
      $var wire 1 : d_int $end
     $upscope $end
    $upscope $end
    $scope module genblk1[2] $end
     $scope module bit_inst $end
      $var wire 1 + x_i $end
      $var wire 1 , y_i $end
      $var wire 1 7 c_i $end
      $var wire 1 ; s_o $end
      $var wire 1 < c_o $end
      $var wire 1 = a_int $end
      $var wire 1 > b_int $end
      $var wire 1 ? d_int $end
     $upscope $end
    $upscope $end
    $scope module genblk1[3] $end
     $scope module bit_inst $end
      $var wire 1 - x_i $end
      $var wire 1 . y_i $end
      $var wire 1 < c_i $end
      $var wire 1 @ s_o $end
      $var wire 1 0 c_o $end
      $var wire 1 A a_int $end
      $var wire 1 B b_int $end
      $var wire 1 C d_int $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000 #
b0000 $
0%
1&
0'
0(
0)
0*
0+
0,
0-
0.
b0000 /
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
b00000 D
b00000000000000000000000000000100 E
b00000000000000000000000000010000 F
b00000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
#50
#100
#150
#200
#250
#300
#350
#400
#450
#500
0&
#550
#600
#650
#700
#750
#800
#850
#900
#950
#1000
1&
#1050
#1100
#1150
#1200
#1250
#1300
#1350
#1400
#1450
#1500
0&
#1550
#1600
#1650
#1700
#1750
#1800
#1850
#1900
#1950
#2000
1&
#2050
#2100
#2150
#2200
#2250
#2300
#2350
#2400
#2450
#2500
0&
#2550
#2600
#2650
#2700
#2750
#2800
#2850
#2900
#2950
#3000
b0010 $
1&
1*
#3050
#3100
18
#3150
#3200
b0010 /
16
#3250
#3300
#3350
#3400
#3450
#3500
0&
#3550
#3600
#3650
#3700
#3750
#3800
#3850
#3900
#3950
#4000
